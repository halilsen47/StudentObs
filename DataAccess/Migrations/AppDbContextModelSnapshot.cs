// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("AKTS")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Credit")
                        .HasColumnType("int");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("LectureId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            AKTS = 6,
                            CourseName = "Mathematics 101",
                            Credit = 3,
                            LectureId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            AKTS = 6,
                            CourseName = "Physics 101",
                            Credit = 3,
                            LectureId = 2
                        });
                });

            modelBuilder.Entity("Entity.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Computer Science"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Electrical Engineering"
                        });
                });

            modelBuilder.Entity("Entity.Entities.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LectureId");

                    b.ToTable("Lectures");

                    b.HasData(
                        new
                        {
                            LectureId = 1,
                            BirthDate = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ahmet",
                            LastName = "Yılmaz"
                        },
                        new
                        {
                            LectureId = 2,
                            BirthDate = new DateTime(1978, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mehmet",
                            LastName = "Kara"
                        });
                });

            modelBuilder.Entity("Entity.Entities.LectureDepartments", b =>
                {
                    b.Property<int>("LectureDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureDepartmentId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.HasKey("LectureDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LectureId");

                    b.ToTable("LectureDepartments");

                    b.HasData(
                        new
                        {
                            LectureDepartmentId = 1,
                            DepartmentId = 1,
                            LectureId = 1
                        },
                        new
                        {
                            LectureDepartmentId = 2,
                            DepartmentId = 2,
                            LectureId = 2
                        });
                });

            modelBuilder.Entity("Entity.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Adress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("StudentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            Adress = "Istanbul, Turkey",
                            BirthDate = new DateTime(2000, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "ali.demir@email.com",
                            FirstName = "Ali",
                            LastName = "Demir",
                            PhoneNumber = "5551234567"
                        },
                        new
                        {
                            StudentId = 2,
                            Adress = "Ankara, Turkey",
                            BirthDate = new DateTime(2001, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "ayse.celik@email.com",
                            FirstName = "Ayşe",
                            LastName = "Çelik",
                            PhoneNumber = "5559876543"
                        });
                });

            modelBuilder.Entity("Entity.Entities.StudentCourse", b =>
                {
                    b.Property<int>("StudentCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentCourseId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentCourseId = 1,
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            StudentCourseId = 2,
                            CourseId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            StudentCourseId = 3,
                            CourseId = 2,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("Entity.Entities.Course", b =>
                {
                    b.HasOne("Entity.Entities.Lecture", "Lecture")
                        .WithMany("Courses")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Entity.Entities.LectureDepartments", b =>
                {
                    b.HasOne("Entity.Entities.Department", "Department")
                        .WithMany("LectureDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entity.Entities.Lecture", "Lecture")
                        .WithMany("LectureDepartments")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Entity.Entities.Student", b =>
                {
                    b.HasOne("Entity.Entities.Department", "department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("department");
                });

            modelBuilder.Entity("Entity.Entities.StudentCourse", b =>
                {
                    b.HasOne("Entity.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entity.Entities.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Entity.Entities.Department", b =>
                {
                    b.Navigation("LectureDepartments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entity.Entities.Lecture", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("LectureDepartments");
                });

            modelBuilder.Entity("Entity.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
